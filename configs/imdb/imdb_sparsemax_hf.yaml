# general args
seed: 38    # for reproducibility
default_root_dir: 'experiments/imdb-sparsemax/'  # path to save logs and models


# training args
train:

    # io
    save_rationales: True       # rationales will be saved in a .csv in the default_root_dir as `rationales-{timestamp}.csv`
    save_tokenizer: False       # the tokenizer will be pickled and store in the checkpoint dir as `tokenizer.pickle`
    save_label_encoder: True    # the label encoder will be pickled and store in the checkpoint dir as `label_encoder.pickle`
    gpu_log: False              # whether to use the gpu callback to see gpu information in the logger

    # data
    dm: 'imdb'                       # data module name (see docs for more options)
    batch_size: 32                  # minibatch size
    num_workers: 4                  # number of workers used for data loading (0 means that only a single core will be used)
    vocab_min_occurrences:  1       # frequency for a token to be added to the vocabulary

    # early stopping
    monitor: 'val_f1score'     # quantity to be monitored
    monitor_mode: 'max'         # whether to see if monitored metric has stopped decreasing (min) or increasing (max)
    monitor_patience: 20         # number of epochs to wait for early stopping

    # pytorch-lightning rationalizer model
    # bert-base-multilingual-cased
    tokenizer: 'bert-base-cased'
    model: 'hf'
    temperature: 1.0
    dropout: 0.1
    explainer: 'attention'
    explainer_activation: 'sparsemax'
    gen_arch: 'bert-base-cased'
    pred_arch: 'bert-base-cased'
    gen_emb_requires_grad: False
    pred_emb_requires_grad: False
    shared_gen_pred: True
    selection_space: 'embedding'

    # model: optimizer
    optimizer: 'adam'
    lr: 0.0001
    weight_decay: 0.000001
    betas: [0.9, 0.999]
    amsgrad: False
    momentum: 0.0
    dampening: 0.0
    nesterov: False
    alpha: 0.99   # for rmsprop
    centered: False  # for rmsprop
    lambd: 0.0001  # for asgd
    t0: 1000000.0  # for asgd

    # model: lr scheduler
    scheduler: 'multistep'
    milestones: [25, 50, 75]
    lr_decay: 0.97  # a.k.a gamma

    # trainer (will be passed to pytorch-lightning's Trainer object)
    # see the complete list here: https://pytorch-lightning.readthedocs.io/en/stable/trainer.html#trainer-flags
    gpus: 1
    gradient_clip_val: 5.0
    min_epochs: 5
    max_epochs: 25
    #limit_test_batches:
    #limit_train_batches: 10
    #limit_val_batches: 1
    #log_every_n_steps: 25


# the options defined here will overwrite the ones defined in the checkpoint
predict:
    # ckpt: null               # will be defined via cli --ckpt or will get last checkpoint version if it exists
    gpus: 1
    load_tokenizer: True       # load a trained tokenizer stored in the checkpoint dir as `tokenizer.pickle`
    load_label_encoder: True   # load a trained label encoder stored in the checkpoint dir as `label_encoder.pickle`
